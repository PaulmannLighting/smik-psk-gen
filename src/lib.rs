use rand_core::{CryptoRng, RngCore};

const KEY_SIZE: usize = 12;

/// Generate a new PSK.
///
/// # Panics
/// Panics if the key size does not match the amount of randomly generated bytes.
pub fn generate_psk<R>(csprng: &mut R) -> [u8; KEY_SIZE]
where
    R: CryptoRng + RngCore,
{
    let mut bytes = Vec::with_capacity(KEY_SIZE);
    bytes.extend_from_slice(&csprng.next_u32().to_le_bytes());
    bytes.extend_from_slice(&csprng.next_u32().to_le_bytes());
    bytes.extend_from_slice(&csprng.next_u32().to_le_bytes());
    bytes.try_into().expect("key size mismatch")
}
